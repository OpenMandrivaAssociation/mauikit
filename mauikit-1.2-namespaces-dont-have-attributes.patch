diff -up mauikit-v1.2.0/src/utils/fmh.h.1~ mauikit-v1.2.0/src/utils/fmh.h
--- mauikit-v1.2.0/src/utils/fmh.h.1~	2020-11-09 19:53:22.000000000 +0100
+++ mauikit-v1.2.0/src/utils/fmh.h	2020-12-07 18:29:37.715237853 +0100
@@ -50,51 +50,47 @@
 /**
  * A set of helpers related to file management and modeling of data
  */
-#ifdef STATIC_MAUIKIT
 namespace FMH
-#else
-namespace MAUIKIT_EXPORT FMH
-#endif
 {
 /**
  * @brief isAndroid
  * @return
  */
-bool isAndroid();
+bool MAUIKIT_EXPORT isAndroid();
 
 /**
  * @brief isWindows
  * @return
  */
-bool isWindows();
+bool MAUIKIT_EXPORT isWindows();
 
 /**
  * @brief isLinux
  * @return
  */
-bool isLinux();
+bool MAUIKIT_EXPORT isLinux();
 
 /**
  * @brief isMac
  * @return
  */
-bool isMac();
+bool MAUIKIT_EXPORT isMac();
 
 /**
  * @brief isIOS
  * @return
  */
-bool isIOS();
+bool MAUIKIT_EXPORT isIOS();
 
 /**
  * @brief The FILTER_TYPE enum
  */
-enum FILTER_TYPE : int { AUDIO, VIDEO, TEXT, IMAGE, DOCUMENT, COMPRESSED, FONT, NONE };
+enum MAUIKIT_EXPORT FILTER_TYPE : int { AUDIO, VIDEO, TEXT, IMAGE, DOCUMENT, COMPRESSED, FONT, NONE };
 
 
-static const QStringList AUDIO_MIMETYPES = {"audio/mpeg", "audio/mp4", "audio/flac", "audio/ogg", "audio/wav"};
-static const QStringList VIDEO_MIMETYPES = {"video/mp4", "video/x-matroska", "video/webm", "video/avi", "video/flv", "video/mpg", "video/wmv", "video/mov", "video/ogg", "video/mpeg", "video/jpeg"};
-static const QStringList TEXT_MIMETYPES = {"text/markdown",
+static const QStringList MAUIKIT_EXPORT AUDIO_MIMETYPES = {"audio/mpeg", "audio/mp4", "audio/flac", "audio/ogg", "audio/wav"};
+static const QStringList MAUIKIT_EXPORT VIDEO_MIMETYPES = {"video/mp4", "video/x-matroska", "video/webm", "video/avi", "video/flv", "video/mpg", "video/wmv", "video/mov", "video/ogg", "video/mpeg", "video/jpeg"};
+static const QStringList MAUIKIT_EXPORT TEXT_MIMETYPES = {"text/markdown",
                                            "text/x-chdr",
                                            "text/x-c++src",
                                            "text/x-c++hdr",
@@ -114,12 +110,12 @@ static const QStringList TEXT_MIMETYPES
                                            "application/x-shellscript",
                                            "application/x-cmakecache",
                                            "application/x-kicad-project"};
-static const QStringList IMAGE_MIMETYPES = {"image/bmp", "image/webp", "image/png", "image/gif", "image/jpeg", "image/web", "image/svg", "image/svg+xml"};
-static const QStringList DOCUMENT_MIMETYPES = {"application/pdf", "application/rtf", "application/doc", "application/odf"};
-static const QStringList COMPRESSED_MIMETYPES = {"application/x-compress","application/x-compressed", "application/x-xz-compressed-tar", "application/x-compressed-tar", "application/x-xz", "application/x-bzip", "application/x-gtar", "application/x-gzip", "application/zip"};
-static const QStringList FONT_MIMETYPES = {"font/ttf", "font/otf"};
+static const QStringList MAUIKIT_EXPORT IMAGE_MIMETYPES = {"image/bmp", "image/webp", "image/png", "image/gif", "image/jpeg", "image/web", "image/svg", "image/svg+xml"};
+static const QStringList MAUIKIT_EXPORT DOCUMENT_MIMETYPES = {"application/pdf", "application/rtf", "application/doc", "application/odf"};
+static const QStringList MAUIKIT_EXPORT COMPRESSED_MIMETYPES = {"application/x-compress","application/x-compressed", "application/x-xz-compressed-tar", "application/x-compressed-tar", "application/x-xz", "application/x-bzip", "application/x-gtar", "application/x-gzip", "application/zip"};
+static const QStringList MAUIKIT_EXPORT FONT_MIMETYPES = {"font/ttf", "font/otf"};
 
-static const QMap<FILTER_TYPE, QStringList> SUPPORTED_MIMETYPES {{FILTER_TYPE::AUDIO, AUDIO_MIMETYPES},
+static const QMap<FILTER_TYPE, QStringList> MAUIKIT_EXPORT SUPPORTED_MIMETYPES {{FILTER_TYPE::AUDIO, AUDIO_MIMETYPES},
                                                                  {FILTER_TYPE::VIDEO, VIDEO_MIMETYPES},
                                                                  {FILTER_TYPE::TEXT, TEXT_MIMETYPES},
                                                                  {FILTER_TYPE::IMAGE, IMAGE_MIMETYPES},
@@ -133,7 +129,7 @@ static const QMap<FILTER_TYPE, QStringLi
  * @param type
  * @return
  */
-static QStringList getMimeTypeSuffixes(const FMH::FILTER_TYPE &type, QString (*cb)(QString))
+static QStringList MAUIKIT_EXPORT getMimeTypeSuffixes(const FMH::FILTER_TYPE &type, QString (*cb)(QString))
 {
     QStringList res;
     QMimeDatabase mimedb;
@@ -147,7 +143,7 @@ static QStringList getMimeTypeSuffixes(c
     return res;
 }
 
-static QHash<FILTER_TYPE, QStringList> FILTER_LIST = {{FILTER_TYPE::AUDIO, getMimeTypeSuffixes(FILTER_TYPE::AUDIO, [](QString suffix) -> QString { return "*." + suffix; })},
+static QHash<FILTER_TYPE, QStringList> MAUIKIT_EXPORT FILTER_LIST = {{FILTER_TYPE::AUDIO, getMimeTypeSuffixes(FILTER_TYPE::AUDIO, [](QString suffix) -> QString { return "*." + suffix; })},
 {FILTER_TYPE::VIDEO, getMimeTypeSuffixes(FILTER_TYPE::VIDEO, [](QString suffix) -> QString { return "*." + suffix; })},
 {FILTER_TYPE::TEXT, getMimeTypeSuffixes(FILTER_TYPE::TEXT, [](QString suffix) -> QString { return "*." + suffix; })},
 {FILTER_TYPE::DOCUMENT, getMimeTypeSuffixes(FILTER_TYPE::DOCUMENT, [](QString suffix) -> QString { return "*." + suffix; })},
@@ -159,7 +155,7 @@ static QHash<FILTER_TYPE, QStringList> F
 /**
  * @brief The MODEL_KEY enum
  */
-enum MODEL_KEY : int {
+enum MAUIKIT_EXPORT MODEL_KEY : int {
     ICON,
     LABEL,
     PATH,
@@ -308,7 +304,7 @@ enum MODEL_KEY : int {
 
 };
 
-static const QHash<MODEL_KEY, QString> MODEL_NAME = {{MODEL_KEY::ICON, "icon"},
+static const QHash<MODEL_KEY, QString> MAUIKIT_EXPORT MODEL_NAME = {{MODEL_KEY::ICON, "icon"},
                                                      {MODEL_KEY::LABEL, "label"},
                                                      {MODEL_KEY::PATH, "path"},
                                                      {MODEL_KEY::URL, "url"},
@@ -454,7 +450,7 @@ static const QHash<MODEL_KEY, QString> M
                                                      {MODEL_KEY::LASTSYNC, "lastsync"}
                                                     };
 
-static const QHash<QString, MODEL_KEY> MODEL_NAME_KEY = {{MODEL_NAME[MODEL_KEY::ICON], MODEL_KEY::ICON},
+static const QHash<QString, MODEL_KEY> MAUIKIT_EXPORT MODEL_NAME_KEY = {{MODEL_NAME[MODEL_KEY::ICON], MODEL_KEY::ICON},
                                                          {MODEL_NAME[MODEL_KEY::LABEL], MODEL_KEY::LABEL},
                                                          {MODEL_NAME[MODEL_KEY::PATH], MODEL_KEY::PATH},
                                                          {MODEL_NAME[MODEL_KEY::URL], MODEL_KEY::URL},
@@ -605,19 +601,19 @@ static const QHash<QString, MODEL_KEY> M
 /**
  * @brief MODEL
  */
-typedef QHash<MODEL_KEY, QString> MODEL;
+typedef QHash<MODEL_KEY, QString> MAUIKIT_EXPORT MODEL;
 
 /**
  * @brief MODEL_LIST
  */
-typedef QVector<MODEL> MODEL_LIST;
+typedef QVector<MODEL> MAUIKIT_EXPORT MODEL_LIST;
 
 /**
  * @brief modelRoles
  * @param model
  * @return
  */
-const QVector<int> modelRoles(const MODEL &model);
+const QVector<int> MAUIKIT_EXPORT modelRoles(const MODEL &model);
 
 /**
  * @brief mapValue
@@ -625,21 +621,21 @@ const QVector<int> modelRoles(const MODE
  * @param key
  * @return
  */
-const QString mapValue(const QVariantMap &map, const MODEL_KEY &key);
+const QString MAUIKIT_EXPORT mapValue(const QVariantMap &map, const MODEL_KEY &key);
 
 /**
  * @brief toMap
  * @param model
  * @return
  */
-const QVariantMap toMap(const MODEL &model);
+const QVariantMap MAUIKIT_EXPORT toMap(const MODEL &model);
 
 /**
  * @brief toModel
  * @param map
  * @return
  */
-const MODEL toModel(const QVariantMap &map);
+const MODEL MAUIKIT_EXPORT toModel(const QVariantMap &map);
 
 /**
          * Creates a MODEL_LIST from a QVariantList
@@ -649,7 +645,7 @@ const MODEL toModel(const QVariantMap &m
  * @param list
  * @return
  */
-const MODEL_LIST toModelList(const QVariantList &list);
+const MODEL_LIST MAUIKIT_EXPORT toModelList(const QVariantList &list);
 
 /**
          * Creates a QVariantList from a MODEL_LIST
@@ -659,7 +655,7 @@ const MODEL_LIST toModelList(const QVari
  * @param list
  * @return
  */
-const QVariantList toMapList(const MODEL_LIST &list);
+const QVariantList MAUIKIT_EXPORT toMapList(const MODEL_LIST &list);
 
 /**
          * Creates a new MODEL from another filtered by the given array of MODEL_KEY
@@ -670,7 +666,7 @@ const QVariantList toMapList(const MODEL
  * @param keys
  * @return
  */
-const MODEL filterModel(const MODEL &model, const QVector<MODEL_KEY> &keys);
+const MODEL MAUIKIT_EXPORT filterModel(const MODEL &model, const QVector<MODEL_KEY> &keys);
 
 /**
          * Extracts from a MODEL_LIST the values from a given MODEL::KEY into a QStringList
@@ -682,7 +678,7 @@ const MODEL filterModel(const MODEL &mod
  * @param key
  * @return
  */
-const QStringList modelToList(const MODEL_LIST &list, const MODEL_KEY &key);
+const QStringList MAUIKIT_EXPORT modelToList(const MODEL_LIST &list, const MODEL_KEY &key);
 
 /**
  * @brief The PATH_CONTENT struct
@@ -696,7 +692,7 @@ struct PATH_CONTENT {
  * @brief The PATHTYPE_KEY enum
  */
 #if defined Q_OS_ANDROID || defined Q_OS_WIN32 || defined Q_OS_MACOS || defined Q_OS_IOS // for android, windows and mac use this for now
-enum PATHTYPE_KEY : int {
+enum MAUIKIT_EXPORT PATHTYPE_KEY : int {
     PLACES_PATH,
     REMOTE_PATH,
     DRIVES_PATH,
@@ -714,7 +710,7 @@ enum PATHTYPE_KEY : int {
     OTHER_PATH,
 };
 #else
-enum PATHTYPE_KEY : int {
+enum MAUIKIT_EXPORT PATHTYPE_KEY : int {
     PLACES_PATH = KFilePlacesModel::GroupType::PlacesType,
     REMOTE_PATH = KFilePlacesModel::GroupType::RemoteType,
     DRIVES_PATH = KFilePlacesModel::GroupType::DevicesType,
@@ -733,7 +729,7 @@ enum PATHTYPE_KEY : int {
 };
 #endif
 
-static const QHash<PATHTYPE_KEY, QString> PATHTYPE_SCHEME = {{PATHTYPE_KEY::PLACES_PATH, "file"},
+static const QHash<PATHTYPE_KEY, QString> MAUIKIT_EXPORT PATHTYPE_SCHEME = {{PATHTYPE_KEY::PLACES_PATH, "file"},
                                                              {PATHTYPE_KEY::BOOKMARKS_PATH, "file"},
                                                              {PATHTYPE_KEY::DRIVES_PATH, "drives"},
                                                              {PATHTYPE_KEY::APPS_PATH, "applications"},
@@ -747,7 +743,7 @@ static const QHash<PATHTYPE_KEY, QString
                                                              {PATHTYPE_KEY::FISH_PATH, "fish"},
                                                              {PATHTYPE_KEY::MTP_PATH, "mtp"}};
 
-static const QHash<QString, PATHTYPE_KEY> PATHTYPE_SCHEME_NAME ={{PATHTYPE_SCHEME[PATHTYPE_KEY::PLACES_PATH], PATHTYPE_KEY::PLACES_PATH},
+static const QHash<QString, PATHTYPE_KEY> MAUIKIT_EXPORT PATHTYPE_SCHEME_NAME ={{PATHTYPE_SCHEME[PATHTYPE_KEY::PLACES_PATH], PATHTYPE_KEY::PLACES_PATH},
                                                                  {PATHTYPE_SCHEME[PATHTYPE_KEY::BOOKMARKS_PATH], PATHTYPE_KEY::BOOKMARKS_PATH},
                                                                  {PATHTYPE_SCHEME[PATHTYPE_KEY::DRIVES_PATH], PATHTYPE_KEY::DRIVES_PATH},
                                                                  {PATHTYPE_SCHEME[PATHTYPE_KEY::APPS_PATH], PATHTYPE_KEY::APPS_PATH},
@@ -761,7 +757,7 @@ static const QHash<QString, PATHTYPE_KEY
                                                                  {PATHTYPE_SCHEME[PATHTYPE_KEY::FISH_PATH], PATHTYPE_KEY::FISH_PATH},
                                                                  {PATHTYPE_SCHEME[PATHTYPE_KEY::MTP_PATH], PATHTYPE_KEY::MTP_PATH}};
 
-static const QHash<PATHTYPE_KEY, QString> PATHTYPE_URI = {{PATHTYPE_KEY::PLACES_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::PLACES_PATH] + "://"},
+static const QHash<PATHTYPE_KEY, QString> MAUIKIT_EXPORT PATHTYPE_URI = {{PATHTYPE_KEY::PLACES_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::PLACES_PATH] + "://"},
                                                           {PATHTYPE_KEY::BOOKMARKS_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::BOOKMARKS_PATH] + "://"},
                                                           {PATHTYPE_KEY::DRIVES_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::DRIVES_PATH] + "://"},
                                                           {PATHTYPE_KEY::APPS_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::APPS_PATH] + ":///"},
@@ -775,7 +771,7 @@ static const QHash<PATHTYPE_KEY, QString
                                                           {PATHTYPE_KEY::FISH_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::FISH_PATH] + "://"},
                                                           {PATHTYPE_KEY::MTP_PATH, PATHTYPE_SCHEME[PATHTYPE_KEY::MTP_PATH] + "://"}};
 
-static const QHash<PATHTYPE_KEY, QString> PATHTYPE_LABEL = {{PATHTYPE_KEY::PLACES_PATH, ("Places")},
+static const QHash<PATHTYPE_KEY, QString> MAUIKIT_EXPORT PATHTYPE_LABEL = {{PATHTYPE_KEY::PLACES_PATH, ("Places")},
                                                             {PATHTYPE_KEY::BOOKMARKS_PATH, ("Bookmarks")},
                                                             {PATHTYPE_KEY::DRIVES_PATH, ("Drives")},
                                                             {PATHTYPE_KEY::APPS_PATH, ("Apps")},
@@ -794,53 +790,53 @@ static const QHash<PATHTYPE_KEY, QString
 /**
  * @brief DataPath
  */
-static const QString DataPath = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
+static const QString MAUIKIT_EXPORT DataPath = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
 
 /**
  * @brief ConfigPath
  */
-static const QString ConfigPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::ConfigLocation)).toString();
+static const QString MAUIKIT_EXPORT ConfigPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::ConfigLocation)).toString();
 
 /**
  * @brief CloudCachePath
  */
-static const QString CloudCachePath = DataPath + "/Cloud/";
+static const QString MAUIKIT_EXPORT CloudCachePath = DataPath + "/Cloud/";
 
 /**
  * @brief DesktopPath
  */
-static const QString DesktopPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).toString();
+static const QString MAUIKIT_EXPORT DesktopPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).toString();
 
 /**
  * @brief AppsPath
  */
-static const QString AppsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::ApplicationsLocation)).toString();
+static const QString MAUIKIT_EXPORT AppsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::ApplicationsLocation)).toString();
 
 /**
  * @brief RootPath
  */
-static const QString RootPath = QUrl::fromLocalFile("/").toString();
+static const QString MAUIKIT_EXPORT RootPath = QUrl::fromLocalFile("/").toString();
 
 #if defined(Q_OS_ANDROID)
-static const QString PicturesPath = QUrl::fromLocalFile(PATHS::PicturesPath).toString();
-static const QString DownloadsPath = QUrl::fromLocalFile(PATHS::DownloadsPath).toString();
-static const QString DocumentsPath = QUrl::fromLocalFile(PATHS::DocumentsPath).toString();
-static const QString HomePath = QUrl::fromLocalFile(PATHS::HomePath).toString();
-static const QString MusicPath = QUrl::fromLocalFile(PATHS::MusicPath).toString();
-static const QString VideosPath = QUrl::fromLocalFile(PATHS::VideosPath).toString();
+static const QString MAUIKIT_EXPORT PicturesPath = QUrl::fromLocalFile(PATHS::PicturesPath).toString();
+static const QString MAUIKIT_EXPORT DownloadsPath = QUrl::fromLocalFile(PATHS::DownloadsPath).toString();
+static const QString MAUIKIT_EXPORT DocumentsPath = QUrl::fromLocalFile(PATHS::DocumentsPath).toString();
+static const QString MAUIKIT_EXPORT HomePath = QUrl::fromLocalFile(PATHS::HomePath).toString();
+static const QString MAUIKIT_EXPORT MusicPath = QUrl::fromLocalFile(PATHS::MusicPath).toString();
+static const QString MAUIKIT_EXPORT VideosPath = QUrl::fromLocalFile(PATHS::VideosPath).toString();
 
-static const QStringList defaultPaths = {HomePath, DocumentsPath, PicturesPath, MusicPath, VideosPath, DownloadsPath};
+static const QStringList MAUIKIT_EXPORT defaultPaths = {HomePath, DocumentsPath, PicturesPath, MusicPath, VideosPath, DownloadsPath};
 
 #else
-static const QString PicturesPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::PicturesLocation)).toString();
-static const QString DownloadsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DownloadLocation)).toString();
-static const QString DocumentsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).toString();
-static const QString HomePath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::HomeLocation)).toString();
-static const QString MusicPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::MusicLocation)).toString();
-static const QString VideosPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::MoviesLocation)).toString();
-static const QString TrashPath = QStringLiteral("trash:/");
+static const QString MAUIKIT_EXPORT PicturesPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::PicturesLocation)).toString();
+static const QString MAUIKIT_EXPORT DownloadsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DownloadLocation)).toString();
+static const QString MAUIKIT_EXPORT DocumentsPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).toString();
+static const QString MAUIKIT_EXPORT HomePath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::HomeLocation)).toString();
+static const QString MAUIKIT_EXPORT MusicPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::MusicLocation)).toString();
+static const QString MAUIKIT_EXPORT VideosPath = QUrl::fromLocalFile(QStandardPaths::writableLocation(QStandardPaths::MoviesLocation)).toString();
+static const QString MAUIKIT_EXPORT TrashPath = QStringLiteral("trash:/");
 
-static const QStringList defaultPaths = {
+static const QStringList MAUIKIT_EXPORT defaultPaths = {
     HomePath,
     DesktopPath,
     DocumentsPath,
@@ -854,7 +850,7 @@ static const QStringList defaultPaths =
 
 #endif
 
-static const QMap<QString, QString> folderIcon {{PicturesPath, "folder-pictures"},
+static const QMap<QString, QString> MAUIKIT_EXPORT folderIcon {{PicturesPath, "folder-pictures"},
                                                 {DownloadsPath, "folder-download"},
                                                 {DocumentsPath, "folder-documents"},
                                                 {HomePath, "user-home"},
@@ -873,21 +869,21 @@ static const QMap<QString, QString> fold
  * @param path
  * @return
  */
-bool fileExists(const QUrl &path);
+bool MAUIKIT_EXPORT fileExists(const QUrl &path);
 
 /**
  * @brief fileDir
  * @param path
  * @return
  */
-const QString fileDir(const QUrl &path);
+const QString MAUIKIT_EXPORT fileDir(const QUrl &path);
 
 /**
  * @brief parentDir
  * @param path
  * @return
  */
-const QUrl parentDir(const QUrl &path);
+const QUrl MAUIKIT_EXPORT parentDir(const QUrl &path);
 
 /**
          * Return the configuration of a single directory represented
@@ -899,7 +895,7 @@ const QUrl parentDir(const QUrl &path);
  * @param path
  * @return
  */
-const QVariantMap dirConf(const QUrl &path);
+const QVariantMap MAUIKIT_EXPORT dirConf(const QUrl &path);
 
 /**
  * @brief setDirConf
@@ -908,7 +904,7 @@ const QVariantMap dirConf(const QUrl &pa
  * @param key
  * @param value
  */
-void setDirConf(const QUrl &path, const QString &group, const QString &key, const QVariant &value);
+void MAUIKIT_EXPORT setDirConf(const QUrl &path, const QString &group, const QString &key, const QVariant &value);
 
 
 
@@ -920,14 +916,14 @@ void setDirConf(const QUrl &path, const
  * @param path
  * @return
  */
-const QString getIconName(const QUrl &path);
+const QString MAUIKIT_EXPORT getIconName(const QUrl &path);
 
 /**
  * @brief getMime
  * @param path
  * @return
  */
-const QString getMime(const QUrl &path);
+const QString MAUIKIT_EXPORT getMime(const QUrl &path);
 
 /**
  * @brief checkFileType
@@ -935,7 +931,7 @@ const QString getMime(const QUrl &path);
  * @param mimeTypeName
  * @return
  */
-bool checkFileType(const FILTER_TYPE &type, const QString &mimeTypeName);
+bool MAUIKIT_EXPORT checkFileType(const FILTER_TYPE &type, const QString &mimeTypeName);
 
 /**
  * @brief thumbnailUrl
@@ -943,7 +939,7 @@ bool checkFileType(const FILTER_TYPE &ty
  * @param url
  * @return
  */
-const QUrl thumbnailUrl(const QUrl &url, const QString &mimetype);
+const QUrl MAUIKIT_EXPORT thumbnailUrl(const QUrl &url, const QString &mimetype);
 
 #if !defined Q_OS_ANDROID && defined Q_OS_LINUX
 /**
@@ -951,7 +947,7 @@ const QUrl thumbnailUrl(const QUrl &url,
  * @param item
  * @return
  */
-const MODEL getFileInfo(const KFileItem &kfile);
+const MODEL MAUIKIT_EXPORT getFileInfo(const KFileItem &kfile);
 #endif
 
 /**
@@ -959,14 +955,14 @@ const MODEL getFileInfo(const KFileItem
  * @param path
  * @return
  */
-const MODEL getFileInfoModel(const QUrl &path);
+const MODEL MAUIKIT_EXPORT getFileInfoModel(const QUrl &path);
 
 /**
  * @brief getFileInfo
  * @param path
  * @return
  */
-const QVariantMap getFileInfo(const QUrl &path);
+const QVariantMap MAUIKIT_EXPORT getFileInfo(const QUrl &path);
 
 /**
 * @brief getDirInfoModel
@@ -974,7 +970,7 @@ const QVariantMap getFileInfo(const QUrl
  * @param type
  * @return
  */
-const MODEL getDirInfoModel(const QUrl &path, const QString &type = QString());
+const MODEL MAUIKIT_EXPORT getDirInfoModel(const QUrl &path, const QString &type = QString());
 
 /**
  * @brief getDirInfo
@@ -982,14 +978,14 @@ const MODEL getDirInfoModel(const QUrl &
  * @param type
  * @return
  */
-const QVariantMap getDirInfo(const QUrl &path);
+const QVariantMap MAUIKIT_EXPORT getDirInfo(const QUrl &path);
 
 /**
  * @brief getPathType
  * @param url
  * @return
  */
-PATHTYPE_KEY getPathType(const QUrl &url);
+PATHTYPE_KEY MAUIKIT_EXPORT getPathType(const QUrl &url);
 }
 
 
